/* Haciendo las cosas del último ejercicio del examen*/
/* 7. Crear un paquete llamado pkEMPLEADOS_BK que contenga los
procedimientos de inserción, actualización y borrado lógico de todos los
campos por código de la tabla EMPLEADOS_BK.
   7.1 Si en la tabla EMPLEADOS se inserta se debe insertar en la tabla
EMPLEADOS_BK.
   7.2 Si en la tabla EMPLEADOS se actualiza se debe actualizar en la
tabla EMPLEADOS_BK.
   7.3 Si en la tabla EMPLEADOS se borra un registro, se debe marcar
como borrado (BORRADO_LOGICO = 1) en la tabla
EMPLEADOS_BK.*/
--v1.0
CREATE OR REPLACE TRIGGER COPIA_EMP
AFTER
INSERT OR DELETE OR UPDATE
ON EMPLEADOS
FOR EACH ROW
DECLARE
nombreVariable TIPO := ... ;
nombreExcepcion EXCEPTION;
BEGIN 
  IF INSERTING THEN
  
    --LLAMAR PROCEDIMIENTO INSERTAR
    NULL;  
  END IF;
  
    IF DELETING THEN
      UPDATE EMPLEADOS_BK
      SET BORRADO_LOGICO = 1
      WHERE CODIGOEMPLEADO = :OLD.CODIGOEMPLEADO
      
    --LLAMAR PROCEDIMIENTO INSERTAR
    NULL;  
  END IF;
  
END;
--v1.5
CREATE OR REPLACE TRIGGER COPIA_EMP
AFTER
INSERT OR DELETE OR UPDATE
ON EMPLEADOS
FOR EACH ROW
DECLARE
nombreVariable TIPO := ... ;
nombreExcepcion EXCEPTION;
BEGIN 
  IF INSERTING THEN
     INSERT INTO EMPLEADOS_BK VALUES(:NEW.CODIGOEMPLEADO); --CON TODOS
    NULL;  
  END IF;
  
   IF DELETING THEN
      UPDATE EMPLEADOS_BK
      SET BORRADO_LOGICO = 1
      WHERE CODIGOEMPLEADO = :OLD.CODIGOEMPLEADO
      
  END IF;
  
  IF UPDATING THEN
    UPDATE EMPLEADOS_BK
    SET NOMBRE = :NEW.NOMBRE
    WHERE CODIGOEMPLEADO = :OLD.CODIGOEMPLEADO;
    --LLAMAR PROCEDIMIENTO DE ACTUALIZACION
  END IF;
  
END;
--v1.7
CREATE OR REPLACE TRIGGER COPIA_EMP
AFTER
INSERT OR DELETE OR UPDATE
ON EMPLEADOS
FOR EACH ROW
DECLARE
nombreVariable TIPO := ... ;
nombreExcepcion EXCEPTION;
BEGIN 
  IF INSERTING THEN
     INSERT INTO EMPLEADOS_BK VALUES(:NEW.CODIGOEMPLEADO); --CON TODOS
    NULL;  
  END IF;
  
   IF DELETING THEN
      UPDATE EMPLEADOS_BK
      SET BORRADO_LOGICO = 1
      WHERE CODIGOEMPLEADO = :OLD.CODIGOEMPLEADO
      
  END IF;
  
  IF UPDATING THEN
  
    IF :NEW.CODIGOEMPLEADO <> :OLD.CODIGOEMPLEADO THEN
    
      UPDATE EMPLEADOS_BK
      SET BORRADO_LOGICO = 1
      WHERE CODIGOEMPLEADO = :OLD.CODIGOEMPLEADO
      
      INSERT INTO EMPLEADOS_BK VALUES(:NEW.CODIGOEMPLEADO); --CON TODOS
      
    ELSE
  
    UPDATE EMPLEADOS_BK
    SET NOMBRE = :NEW.NOMBRE
    WHERE CODIGOEMPLEADO = :OLD.CODIGOEMPLEADO;
    --LLAMAR PROCEDIMIENTO DE ACTUALIZACION
  END IF;
  
END;
--v2.0
CREATE OR REPLACE TRIGGER COPIA_EMP
AFTER
INSERT OR DELETE OR UPDATE
ON EMPLEADOS
FOR EACH ROW
DECLARE
nombreVariable TIPO := ... ;
nombreExcepcion EXCEPTION;
BEGIN 
  IF INSERTING THEN
     INSERT INTO EMPLEADOS_BK VALUES(:NEW.CODIGOEMPLEADO); --CON TODOS
  END IF;
  
   IF DELETING THEN
      UPDATE EMPLEADOS_BK
      SET BORRADO_LOGICO = 1
      WHERE CODIGOEMPLEADO = :OLD.CODIGOEMPLEADO
      
  END IF;
  
  IF UPDATING THEN
  
    IF :NEW.CODIGOEMPLEADO <> :OLD.CODIGOEMPLEADO THEN
    
      UPDATE EMPLEADOS_BK
      SET BORRADO_LOGICO = 1
      WHERE CODIGOEMPLEADO = :OLD.CODIGOEMPLEADO
      
      INSERT INTO EMPLEADOS_BK VALUES(:NEW.CODIGOEMPLEADO); --CON TODOS
      
    ELSE
  
      UPDATE EMPLEADOS_BK
      SET NOMBRE = :NEW.NOMBRE --TODAS LAS COLUMNAS
      WHERE CODIGOEMPLEADO = :OLD.CODIGOEMPLEADO;
    END IF;
  
 
  END IF;
  
END;

/* Ejercicio completo si no casi completo por Antonio */
CREATE OR REPLACE PACKAGE pckEMPLEADOSBK is

  PROCEDURE spInsertaEMPBK(
            CODEMP EMPLEADOS_BK.CODIGOEMPLEADO%TYPE,
            NOMP EMPLEADOS_BK.NOMBRE%TYPE,
            APE1 EMPLEADOS_BK.APELLIDO1%TYPE,
            APE2 EMPLEADOS_BK.APELLIDO2%TYPE,            
            EXT EMPLEADOS_BK.EXTENSION%TYPE,      
            EM EMPLEADOS_BK.EMAIL%TYPE,                                          
            CODOFI EMPLEADOS_BK.CODIGOOFICINA%TYPE,                                          
            CODJEFE EMPLEADOS_BK.CODIGOJEFE%TYPE,                                          
            PUE EMPLEADOS_BK.PUESTO%TYPE);
  
  PROCEDURE spBorraEMPBK(
              CODEMP EMPLEADOS_BK.CODIGOEMPLEADO%TYPE
              );

  PROCEDURE spActualizaEMPBK(
            CODEMP EMPLEADOS_BK.CODIGOEMPLEADO%TYPE,
            NOMP EMPLEADOS_BK.NOMBRE%TYPE,
            APE1 EMPLEADOS_BK.APELLIDO1%TYPE,
            APE2 EMPLEADOS_BK.APELLIDO2%TYPE,            
            EXT EMPLEADOS_BK.EXTENSION%TYPE,      
            EM EMPLEADOS_BK.EMAIL%TYPE,                                          
            CODOFI EMPLEADOS_BK.CODIGOOFICINA%TYPE,                                          
            CODJEFE EMPLEADOS_BK.CODIGOJEFE%TYPE,                                          
            PUE EMPLEADOS_BK.PUESTO%TYPE,
            BORLOG EMPLEADOS_BK.BORRADO_LOGICO%TYPE,
            CODEMP2 EMPLEADOS_BK.CODIGOEMPLEADO%TYPE);
end;
/
CREATE OR REPLACE PACKAGE body pckEMPLEADOSBK is

PROCEDURE spInsertaEMPBK(
            CODEMP EMPLEADOS_BK.CODIGOEMPLEADO%TYPE,
            NOMP EMPLEADOS_BK.NOMBRE%TYPE,
            APE1 EMPLEADOS_BK.APELLIDO1%TYPE,
            APE2 EMPLEADOS_BK.APELLIDO2%TYPE,            
            EXT EMPLEADOS_BK.EXTENSION%TYPE,      
            EM EMPLEADOS_BK.EMAIL%TYPE,                                          
            CODOFI EMPLEADOS_BK.CODIGOOFICINA%TYPE,                                          
            CODJEFE EMPLEADOS_BK.CODIGOJEFE%TYPE,                                          
            PUE EMPLEADOS_BK.PUESTO%TYPE)
is
begin
  insert into EMPLEADOS_BK
  values ( CODEMP,NOMP,APE1,APE2,EXT,EM,CODOFI,CODJEFE,PUE,0);
  
end;
/
CREATE OR REPLACE TRIGGER COPIA_EMP
AFTER
INSERT OR DELETE OR UPDATE
ON EMPLEADOS
FOR EACH ROW
DECLARE
BEGIN
 
 IF INSERTING THEN
    NULL;
   pckEMPLEADOSBK.spInsertaEMPBK(:NEW.CODIGOEMPLEADO,:NEW.NOMBRE,:NEW.APELLIDO1,:NEW.APELLIDO2,
           :NEW.EXTENSION,:NEW.EMAIL,:NEW.CODIGOOFICINA,:NEW.CODIGOJEFE,:NEW.PUESTO);
     
 END IF;

 IF DELETING THEN
   pckEMPLEADOSBK.spBorraEMPBK(:OLD.CODIGOEMPLEADO);
 END IF;
 
 IF UPDATING THEN
  
  IF :NEW.CODIGOEMPLEADO <> :OLD.CODIGOEMPLEADO THEN
  
    pckEMPLEADOSBK.spBorraEMPBK(:OLD.CODIGOEMPLEADO);
    
    pckEMPLEADOSBK.spInsertaEMPBK(
     :NEW.CODIGOEMPLEADO,:NEW.NOMBRE,:NEW.APELLIDO1,:NEW.APELLIDO2,:NEW.EXTENSION,
     :NEW.EMAIL,:NEW.CODIGOOFICINA,:NEW.CODIGOJEFE,:NEW.PUESTO);
  
  ELSE
    pckEMPLEADOSBK.spActualizaEMPBK(
     :NEW.CODIGOEMPLEADO,:NEW.NOMBRE,:NEW.APELLIDO1,:NEW.APELLIDO2,:NEW.EXTENSION,
     :NEW.EMAIL,:NEW.CODIGOOFICINA,:NEW.CODIGOJEFE,:NEW.PUESTO,0,:OLD.CODIGOEMPLEADO);  
  END IF;  
 END IF;

END;
/
SHOW ERRORS;

/*
 * Ejercicio aparte
 */
 
--NO PUEDO MODIFICAR EL SALARIO
CREATE OR REPLACE TRIGGER noModificaSalario
BEFORE
UPDATE OF SALARIO
ON EMPLEADOS
FOR EACH ROW
DECLARE
BEGIN

raise_application_error(-20202, 'EL SALARIO NO PUEDE SER MODIFICADO');

END;
/
SHOW ERRORS;
/

UPDATE EMPLEADOS
SET SALARIO = 5000;

/*
 * Ejercicio aparte
 */
--HACER MODULOS CON A Y B
CREATE OR REPLACE FUNCTION DIVIDE_MODULO (A IN INT, B IN INT)
RETURN NUMBER
IS

  V_A INT;
  V_B INT;
  V_C NUMBER(20,2);
  
  DIV_CERO EXCEPTION;

BEGIN

  V_A = MOD(A,10);
  V_B = MOD(B,10);
  
  IF V_B = 0 THEN
  
    RAISE DIV_CERO;
    
  END IF;
  
  V_C := V_A/V_B;
  
  ---1000 LINEAS DE CODIGO
  
  RETURN V_C;
  
  EXCEPTION
  WHEN DIV_CERO THEN
  
    RETURN -1;
    
END;
